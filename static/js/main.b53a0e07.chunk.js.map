{"version":3,"sources":["components/Navbar/Navbar.module.css","api/index.js","components/Tree/Tree.js","pages/home/home.js","components/Navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","fetchcommit","username","repo","a","changeableUrl","axios","get","data","console","log","Tree1","state","values","reponame","handleChange","event","setState","target","name","value","handleSubmit","undefined","commitdata","newval","val","this","map","obj","i","key","content","commit","message","author","login","className","type","placeholder","onChange","onClick","open","style","color","fill","width","Component","home","styles","container","Navbar","navbar","to","div","whileHover","scale","whileTap","logo","right","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"8FACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,KAAO,uB,2UCG1EC,EAAW,uCAAG,WAAOC,EAAUC,GAAjB,iBAAAC,EAAA,6DACrBC,EAHM,gCAKNH,GAAYC,IACdE,EAAa,uCAAmCH,EAAnC,YAA+CC,EAA/C,aAJU,kBAQJG,IAAMC,IAAIF,GARN,cAQjBG,EARiB,yBAUhBA,GAVgB,gCAYvBC,QAAQC,IAAR,MAZuB,yDAAH,wD,QC2GTC,G,kNArGbC,MAAQ,CACNC,OAAQ,GACRX,SAAU,KACVY,SAAU,M,EAcZC,aAAe,SAACC,GACd,EAAKC,SAAL,eACGD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,S,EAItCC,a,sBAAe,4BAAAjB,EAAA,8DACckB,GAAvB,EAAKV,MAAMV,eAAgDoB,GAAvB,EAAKV,MAAME,SADtC,iEAKYb,EACvB,EAAKW,MAAMV,SACX,EAAKU,MAAME,UAPA,OAKPS,EALO,OAUb,EAAKN,SAAS,CAAEJ,OAAQU,EAAWf,OAVtB,2C,uDAeb,IAOIgB,EADAC,EAAMC,KAAKd,MAAMC,OAqDrB,YAnDcS,GAAVG,EAAI,KAEND,EAASC,EAAIE,KAAI,SAACC,EAAKC,GAAN,OACf,kBAAC,IAAD,CAAMC,IAAKD,EAAGE,QAASH,EAAII,OAAOC,SAChC,kBAAC,IAAD,CAAMF,QAASH,EAAIM,OAAOC,aAM9B,kBAAC,WAAD,KACE,yBAAKC,UAAU,cACb,6BACE,2BACEjB,KAAK,WACLkB,KAAK,OACLC,YAAY,wBACZC,SAAUb,KAAKX,gBAGnB,6BACE,2BACEI,KAAK,WACLkB,KAAK,OACLC,YAAY,wBACZC,SAAUb,KAAKX,gBAGnB,6BACE,4BAAQsB,KAAK,SAASG,QAASd,KAAKL,cAApC,WAMHG,EACC,yBAAKY,UAAU,UACb,kBAAC,IAAD,CACEL,QAAQ,iBACRU,MAAI,EACJD,QAAS/B,QAAQC,IACjB0B,UAAU,OACVM,MAlDS,CACjBC,MAAO,QACPC,KAAM,QACNC,MAAO,SAiDErB,IAGH,U,GA9FQsB,cCOLC,E,uKARX,OACE,yBAAKX,UAAWY,IAAOC,WACrB,kBAAC,EAAD,W,GAJWH,a,yBCwBJI,EAxBA,WACb,OACE,yBAAKd,UAAWY,IAAOG,QACrB,kBAAC,IAAD,CAAMC,GAAG,KACP,kBAAC,IAAOC,IAAR,CACEC,WAAY,CAAEC,MAAO,KACrBC,SAAU,CAAED,MAAO,IACnBnB,UAAWY,IAAOS,MAElB,2CAGJ,yBAAKrB,UAAWY,IAAOU,OACrB,6BACE,kBAAC,IAAD,CAAMN,GAAG,KAAT,SAEF,6BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,aCGKO,MAbf,WACE,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWf,QCPvBgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvE,QAAQuE,MAAMA,EAAM/C,c","file":"static/js/main.b53a0e07.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__AW0FB\",\"right\":\"Navbar_right__3X6lB\",\"logo\":\"Navbar_logo__CiSr_\"};","import axios from \"axios\";\r\n\r\nconst url = \"https://api.github.com/repos/\";\r\n\r\nexport const fetchcommit = async (username, repo) => {\r\n  let changeableUrl = url;\r\n\r\n  if (username && repo) {\r\n    changeableUrl = `https://api.github.com/repos/${username}/${repo}/commits`;\r\n  }\r\n\r\n  try {\r\n    const data = await axios.get(changeableUrl);\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, { useState, useEffect, Component, Fragment } from \"react\";\r\n\r\n//api\r\nimport { fetchcommit } from \"../../api/index\";\r\n\r\nimport Tree from \"react-animated-tree\";\r\nimport data1 from \"../../data\";\r\nimport \"./Tree.css\";\r\n\r\nclass Tree1 extends Component {\r\n  state = {\r\n    values: [],\r\n    username: null,\r\n    reponame: null,\r\n  };\r\n\r\n  // async componentDidMount() {\r\n  //   const commitdata = await fetchcommit(\r\n  //     this.state.username,\r\n  //     this.state.reponame\r\n  //   );\r\n\r\n  //   // commitdata.data.map((obj) => console.log(obj));\r\n\r\n  //   this.setState({ values: commitdata.data });\r\n  // }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = async () => {\r\n    if (this.state.username == undefined || this.state.reponame == undefined) {\r\n      return;\r\n    }\r\n\r\n    const commitdata = await fetchcommit(\r\n      this.state.username,\r\n      this.state.reponame\r\n    );\r\n\r\n    this.setState({ values: commitdata.data });\r\n    // window.location = \"/home\";\r\n  };\r\n\r\n  render() {\r\n    const treeStyles = {\r\n      color: \"white\",\r\n      fill: \"white\",\r\n      width: \"100%\",\r\n    };\r\n\r\n    let val = this.state.values;\r\n    var newval;\r\n    if (val[0] == undefined) {\r\n    } else {\r\n      newval = val.map((obj, i) => (\r\n        <Tree key={i} content={obj.commit.message}>\r\n          <Tree content={obj.author.login}></Tree>\r\n        </Tree>\r\n      ));\r\n    }\r\n\r\n    var search = (\r\n      <Fragment>\r\n        <div className=\"search-box\">\r\n          <div>\r\n            <input\r\n              name=\"username\"\r\n              type=\"text\"\r\n              placeholder=\"Enter GitHub Username\"\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n          <div>\r\n            <input\r\n              name=\"reponame\"\r\n              type=\"text\"\r\n              placeholder=\"Enter Repository name\"\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n          <div>\r\n            <button type=\"submit\" onClick={this.handleSubmit}>\r\n              Enter\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {newval ? (\r\n          <div className=\"window\">\r\n            <Tree\r\n              content=\"Commit History\"\r\n              open\r\n              onClick={console.log}\r\n              className=\"tree\"\r\n              style={treeStyles}\r\n            >\r\n              {newval}\r\n            </Tree>\r\n          </div>\r\n        ) : null}\r\n      </Fragment>\r\n    );\r\n\r\n    return search;\r\n  }\r\n}\r\n\r\nexport default Tree1;\r\n","import React, { Component } from \"react\";\r\n\r\nimport styles from \"../home/home.styles.css\";\r\n\r\nimport Tree1 from \"../../components/Tree/Tree\";\r\n\r\nclass home extends Component {\r\n  render() {\r\n    return (\r\n      <div className={styles.container}>\r\n        <Tree1 />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default home;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nimport styles from \"./Navbar.module.css\";\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <div className={styles.navbar}>\r\n      <Link to=\"/\">\r\n        <motion.div\r\n          whileHover={{ scale: 1.2 }}\r\n          whileTap={{ scale: 0.8 }}\r\n          className={styles.logo}\r\n        >\r\n          <p>Git Commit</p>\r\n        </motion.div>\r\n      </Link>\r\n      <div className={styles.right}>\r\n        <div>\r\n          <Link to=\"/\">Tree</Link>\r\n        </div>\r\n        <div>\r\n          <Link to=\"/about\">About</Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { Fragment } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport \"react-tree-graph/dist/style.css\";\nimport \"./App.css\";\nimport data from \"./data\";\n\n// pages\nimport home from \"./pages/home/home\";\n\n//components\nimport Navbar from \"./components/Navbar/Navbar\";\n\nfunction App() {\n  return (\n    <div>\n      <Router>\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\" component={home} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}